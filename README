En grandes medidas lo que hace este proyecto es sencillamente registrar uno usuario en una base de datos y guardarlo de la 
misma como también poderlo loogear a ese mismo usuario si es que existe y puede responder sí realmente existe el usuario con el que se quiere
 ingresar o no lo mismo pasa con la creación del mismo
 Descripción de la librería UUID:

La librería UUID (Universally Unique Identifier) es una herramienta que permite generar identificadores únicos de forma aleatoria. Estos identificadores son representados por una cadena de caracteres de longitud fija, normalmente de 32 caracteres hexadecimales divididos en grupos separados por guiones.

Razones para usar UUID en lugar de un ID autonumérico:

1.-Los UUID generados son únicos a nivel mundial, lo que significa que hay una probabilidad extremadamente baja de que se generen duplicados. Esto los hace ideales para aplicaciones distribuidas o sistemas en los que se requiere garantizar la unicidad en diferentes entornos o bases de datos.

2.-Los UUID no dependen de una base de datos específica ni de un contador secuencial. Pueden generarse en cualquier plataforma o lenguaje de programación y utilizarse en diferentes sistemas sin problemas de compatibilidad.

3.-A diferencia de los IDs autonuméricos, los UUID no revelan información sobre la secuencia o cantidad de registros en la base de datos, lo que puede ser beneficioso para proteger la privacidad o evitar posibles ataques de fuerza bruta.

Explicación del parámetro Salt Rounds en la librería bcryptjs:

El parámetro "Salt Rounds" en la librería bcryptjs es una configuración que determina el costo computacional utilizado para generar el "salt" (una cadena aleatoria) utilizado en el proceso de hash de contraseñas.

La idea principal del "Salt Rounds" es aumentar la resistencia a los ataques de fuerza bruta mediante el incremento del tiempo necesario para generar un hash de contraseña. A medida que se aumenta el número de salt rounds, aumenta el costo computacional necesario para calcular un hash. Esto dificulta los intentos de adivinación de contraseñas a través de la generación masiva de hashes en poco tiempo.

Por ejemplo, si se establece un valor de salt rounds en 10, el proceso de generación de hash tomará más tiempo en comparación con un valor más bajo, como 5. Sin embargo, el tiempo de generación del hash aumenta exponencialmente a medida que se incrementa el valor de salt rounds, por lo que se debe encontrar un equilibrio entre la seguridad deseada y el tiempo de procesamiento aceptable en el entorno de la aplicación.